; вспомогательная функция для объединения выражений
(defun .(x, y) y)

; логическое нет
(defun is-not(b)
    (if (= b 0) 1 0)
)

; остаток от деления n на d
(defun mod(n d)
    (setq a (if (< n 0) (- 0 n) n))
    (setq b (if (< d 0) (- 0 d) d))
    (setq negative (or (and (< n 0) (or (> d 0) (= d 0))) (and (or (> n 0) (= n 0)) (< d 0))))
    (setq output 0)
    (loop (or (= a b) (> a b))
        (setq decrement b)
        (loop (or (> a decrement) (= a decrement))
            (setq a (- a decrement))
            (setq output (+ output decrement))
            (setq decrement (+ decrement decrement))
        )
    )
    (if negative (- 0 output) output)
    (- n output)
)

; целочисленное деление n на d
(defun div(n d)
    (setq a (if (< n 0) (- 0 n) n))
    (setq b (if (< d 0) (- 0 d) d))
    (setq negative (or (and (< n 0) (or (> d 0) (= d 0))) (and (or (> n 0) (= n 0)) (< d 0))))
    (setq output 0)
    (loop (or (= a b) (> a b))
        (setq counter 1)
        (setq decrement b)
        (loop (or (> a decrement) (= a decrement))
            (setq a (- a decrement))
            (setq output (+ output counter))
            (setq counter (+ counter counter))
            (setq decrement (+ decrement decrement))
        )
    )
    (if negative (- 0 output) output)
)

; вывести число n (используется рекурсия для вывода цифр в корректном порядке)
(defun print-num(n)
    (if (= n 0)
        0 ; return from recursion
        (. (.
            (if (< n 0)
                (. (setq n (- 0 n)) (put '-'))
                0
            )
            (print-num (div n 10))) ; goto recursion
            (put (+ '0' (mod n 10)))
        )
    )
)

; вывести строку по адресу addr
(defun print(addr)
    (setq len (load addr))
    (setq i 0)
    (loop (> len i)
        (setq i (+ i 1))
        (put (load (+ addr i)))
    )
)

; прочитать (максимум) n символов с ввода в буфер по адресу (сформировать Pascal-строку)
(defun read(addr n)
    (setq len 0)
    (setq ptr (+ 1 addr))
    (setq char 0)
    (loop (and
            (is-not (= 0 (setq char (get)))) ; input == EOF
            (< (+ len 1) n)                  ; not out of buffer
        )
        (store ptr char)                     ; write char
        (setq ptr (+ 1 ptr))                 ; move ptr
        (setq len (+ 1 len))                 ; increment len
    )
    (store addr len)                         ; write string length
    len ; return length of string
)
